attributes = c("ensembl_gene_id",
"hgnc_symbol",
"transcript_biotype",
"description"),
values = counts$ensembl_gene_id, mart = ensembl)
counts$ensembl_gene_id
counts
# raw counts downloaded from GEO
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE205555
counts_csv <- "tables/counts.csv"
counts_tpm_csv <- "tables/counts_tpm.csv"
if (file.exists(counts_csv)){
counts <- read_csv(counts_csv)
counts_tpm <- read_csv(counts_tpm_csv)
}else{ # this chunk extracts counts and then normalizes them with TPM method if they aren't already organized into .csv-files
# read counts files for every sample (2 columns - gene ID and its expression count)
files <- fs::dir_ls(path = "../data/input_geo", glob = "*exonCounts.txt")
# create a tibble out of the raw files
counts <- readr::read_tsv(files, id = "path", col_names = c("ensembl_gene_id", "raw_counts"))
df_split <- str_split_fixed(counts$path, "_", 13) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample = str_replace(sample, "geo/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from = "sample", values_from = "raw_counts")
# get previously calculated GC lengths (obviously, in human genome) needed for further TPM normalization
gene_length <- read_tsv("tables/GC_lengths.tsv") %>% arrange(ensembl_gene_id)
counts <- counts %>% arrange(ensembl_gene_id)
# select only GC lengths of the genes presented after sequencing
gene_ids <- intersect(counts$ensembl_gene_id, gene_length$ensembl_gene_id)
v_len <- gene_length %>% dplyr::filter(ensembl_gene_id %in% gene_ids)
counts <- counts %>% dplyr::filter(ensembl_gene_id %in% gene_ids)
# save raw organized counts to .csv-file
write_csv(counts, counts_csv)
counts <- counts %>% column_to_rownames("ensembl_gene_id")
# normalize counts and save them to .csv-file
x <- counts / v_len$Length
counts_tpm <- t(t(x) * 1e6 / colSums(x)) %>% as.data.frame() %>% round(2) %>%
rownames_to_column("ensembl_gene_id") %>% write_csv(counts_tpm_csv)
}
counts
biomart_list <- getBM(filter = "ensembl_gene_id",
attributes = c("ensembl_gene_id",
"hgnc_symbol",
"transcript_biotype",
"description"),
values = counts$ensembl_gene_id, mart = ensembl)
biomart_list <- getBM(filter = "ensembl_gene_id",
attributes = c("ensembl_gene_id",
"hgnc_symbol",
"transcript_biotype",
"description"),
values = counts$ensembl_gene_id, mart = ensembl)
biomart_list_filtered <- biomart_list %>% filter(transcript_biotype %in% c("protein_coding",
"miRNA"))
biomart_list_filtered <- biomart_list %>% dplyr::filter(transcript_biotype %in% c("protein_coding",
"miRNA"))
counts_filtered <- counts %>% filter(ensembl_gene_id %in% biomart_list_filtered$ensembl_gene_id)
counts_filtered <- counts %>% dplyr::filter(ensembl_gene_id %in% biomart_list_filtered$ensembl_gene_id)
write.csv(counts_filtered, "tables/counts_filtered.csv", row.names = FALSE)
write.csv(counts_filtered, "tables/counts_filtered.csv", row.names = FALSE)
write.csv(biomart_list_filtered, "tables/gene_names_mapped.csv", row.names = FALSE)
knitr::opts_chunk$set(echo=TRUE)
setwd('C:/Users/user/differential-expression_rna-seq')
getwd()
pca_calculated <- pca(counts, metadata=metadata_table, removeVar=0.1)
library(PCAtools)
pca_calculated <- pca(counts, metadata=metadata_table, removeVar=0.1)
pca_calculated <- pca(counts, metadata=metadata, removeVar=0.1)
# the metadata table was parsed from the GEO accession webpage by parsing the sample's ID and name preview
metadata <- read_csv("tables/metadata.csv")
pca_calculated <- pca(counts, metadata=metadata, removeVar=0.1)
# the metadata table was parsed from the GEO accession webpage by parsing the sample's ID and name preview
metadata <- read_csv("tables/metadata.csv", row.names = 1)
# raw counts downloaded from GEO
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE205555
counts_csv <- "tables/counts.csv"
counts_tpm_csv <- "tables/counts_tpm.csv"
if (file.exists(counts_csv)){
counts <- read.csv(counts_csv, row.names = 1)
counts_tpm <- read.csv(counts_tpm_csv, row.names = 1)
}else{ # this chunk extracts counts and then normalizes them with TPM method if they aren't already organized into .csv-files
# read counts files for every sample (2 columns - gene ID and its expression count)
files <- fs::dir_ls(path="../data/input_geo", glob="*exonCounts.txt")
# create a tibble out of the raw files
counts <- readr::read_tsv(files, id="path", col_names=c("ensembl_gene_id", "raw_counts"))
df_split <- str_split_fixed(counts$path, "_", 13) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample=str_replace(sample, "geo/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from="sample", values_from="raw_counts")
# get previously calculated GC lengths (obviously, in human genome) needed for further TPM normalization
gene_length <- read_tsv("tables/GC_lengths.tsv") %>% arrange(ensembl_gene_id)
counts <- counts %>% arrange(ensembl_gene_id)
# select only GC lengths of the genes presented after sequencing
gene_ids <- intersect(counts$ensembl_gene_id, gene_length$ensembl_gene_id)
v_len <- gene_length %>% dplyr::filter(ensembl_gene_id %in% gene_ids)
counts <- counts %>% dplyr::filter(ensembl_gene_id %in% gene_ids)
# save raw organized counts to .csv-file
write_csv(counts, counts_csv)
counts <- counts %>% column_to_rownames("ensembl_gene_id")
# normalize counts and save them to .csv-file
x <- counts / v_len$Length
counts_tpm <- t(t(x) * 1e6 / colSums(x)) %>% as.data.frame() %>% round(2) %>%
rownames_to_column("ensembl_gene_id") %>% write_csv(counts_tpm_csv)
}
# the metadata table was parsed from the GEO accession webpage by parsing the sample's ID and name preview
metadata <- read.csv("tables/metadata.csv", row.names = 1)
# get genes info via biomaRts
biomart_list <- getBM(filter="ensembl_gene_id",
attributes=c("ensembl_gene_id",
"hgnc_symbol",
"transcript_biotype",
"description"),
values=counts$ensembl_gene_id, mart=ensembl)
counts
counts <- read.csv(counts_csv)
counts <- read.csv(counts_csv)
counts_tpm <- read.csv(counts_tpm_csv)
counts
# raw counts downloaded from GEO
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE205555
counts_csv <- "tables/counts.csv"
counts_tpm_csv <- "tables/counts_tpm.csv"
if (file.exists(counts_csv)){
counts <- read.csv(counts_csv)
counts_tpm <- read.csv(counts_tpm_csv)
}else{ # this chunk extracts counts and then normalizes them with TPM method if they aren't already organized into .csv-files
# read counts files for every sample (2 columns - gene ID and its expression count)
files <- fs::dir_ls(path="../data/input_geo", glob="*exonCounts.txt")
# create a tibble out of the raw files
counts <- readr::read_tsv(files, id="path", col_names=c("ensembl_gene_id", "raw_counts"))
df_split <- str_split_fixed(counts$path, "_", 13) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample=str_replace(sample, "geo/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from="sample", values_from="raw_counts")
# get previously calculated GC lengths (obviously, in human genome) needed for further TPM normalization
gene_length <- read_tsv("tables/GC_lengths.tsv") %>% arrange(ensembl_gene_id)
counts <- counts %>% arrange(ensembl_gene_id)
# select only GC lengths of the genes presented after sequencing
gene_ids <- intersect(counts$ensembl_gene_id, gene_length$ensembl_gene_id)
v_len <- gene_length %>% dplyr::filter(ensembl_gene_id %in% gene_ids)
counts <- counts %>% dplyr::filter(ensembl_gene_id %in% gene_ids)
# save raw organized counts to .csv-file
write_csv(counts, counts_csv)
counts <- counts %>% column_to_rownames("ensembl_gene_id")
# normalize counts and save them to .csv-file
x <- counts / v_len$Length
counts_tpm <- t(t(x) * 1e6 / colSums(x)) %>% as.data.frame() %>% round(2) %>%
rownames_to_column("ensembl_gene_id") %>% write_csv(counts_tpm_csv)
}
View(metadata)
counts <- counts %>% rownames_to_column("ensembl_gene_id")
counts <- counts %>% as.data.frame() %>% tibble::rownames_to_column("ensembl_gene_id")
counts <- counts %>% as.data.frame() %>% tibble::rownames_to_column()
counts
counts <- read.csv(counts_csv)
counts <- counts %>% tibble::rownames_to_column()
counts
counts <- read.csv(counts_csv)
# the metadata table was parsed from the GEO accession webpage by parsing the sample's ID and name preview
metadata <- read.csv("tables/metadata.csv")
metadata
# the metadata table was parsed from the GEO accession webpage by parsing the sample's ID and name preview
metadata <- read.csv("tables/metadata.csv", row.names = 1)
metadata
help(rownames_to_column)
counts
counts <- read.csv(counts_csv)
counts
# get genes info via biomaRts
biomart_list <- getBM(filter="ensembl_gene_id",
attributes=c("ensembl_gene_id",
"hgnc_symbol",
"transcript_biotype",
"description"),
values=counts$ensembl_gene_id, mart=ensembl)
# we subset only protein coding genes and miRNA
biomart_list_filtered <- biomart_list %>% dplyr::filter(transcript_biotype %in% c("protein_coding",
"miRNA"))
metadata
# the metadata table was parsed from the GEO accession webpage by taking the sample's ID and name preview
metadata <- read.csv("tables/metadata.csv")
metadata
pca_calculated <- pca(counts, metadata=metadata, removeVar=0.1)
# the metadata table was parsed from the GEO accession webpage by taking the sample's ID and name preview
metadata <- read.csv("tables/metadata.csv", row.names = 1)
metadata
pca_calculated <- pca(counts, metadata=metadata, removeVar=0.1)
counts
counts <- counts %>% tibble::column_to_rownames("ensembl_gene_id")
counts
pca_calculated <- pca(counts, metadata=metadata, removeVar=0.1)
biplot(pca_calculated, colby="fibroblast_line", legendPosition="right")
biplot(pca_calculated, colby="treatment", legendPosition="right", lab=NULL)
biplot(pca_calculated, colby="fibroblast_line", legendPosition="right", lab=NULL)
biplot(pca_calculated, colby="treatment", legendPosition="right", lab=NULL)
biplot(pca_calculated, colby="fibroblast_line", legendPosition="right", lab=NULL)
counts_tpm <- read.csv(counts_tpm_csv)
# the metadata table was parsed from the GEO accession webpage by taking the sample's ID and name preview
metadata <- read.csv("tables/metadata.csv", row.names = 1)
counts_tpm
# raw counts downloaded from GEO
# https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE205555
counts_csv <- "tables/counts.csv"
if (file.exists(counts_csv)){
counts <- read.csv(counts_csv)
}else{ # this chunk extracts counts and then normalizes them with TPM method if they aren't already organized into .csv-files
# read counts files for every sample (2 columns - gene ID and its expression count)
files <- fs::dir_ls(path="../data/input_geo", glob="*exonCounts.txt")
# create a tibble out of the raw files
counts <- readr::read_tsv(files, id="path", col_names=c("ensembl_gene_id", "raw_counts"))
df_split <- str_split_fixed(counts$path, "_", 13) %>% as.data.frame()
counts$sample <- df_split$V2
counts <- counts %>%
mutate(sample=str_replace(sample, "geo/", "")) %>%
dplyr::relocate(sample) %>% dplyr::select(-path) %>%
pivot_wider(names_from="sample", values_from="raw_counts")
# save raw organized counts to .csv-file
write_csv(counts, counts_csv)
counts <- counts %>% column_to_rownames("ensembl_gene_id")
}
ensembl <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
# get genes info via biomaRts
biomart_list <- getBM(filter="ensembl_gene_id",
attributes=c("ensembl_gene_id",
"hgnc_symbol",
"transcript_biotype",
"description"),
values=counts$ensembl_gene_id, mart=ensembl)
# we subset only protein coding genes and miRNA
biomart_list_filtered <- biomart_list %>% dplyr::filter(transcript_biotype %in% c("protein_coding",
"miRNA"))
# select counts corresponding to retrieved biomaRt list
counts_filtered <- counts %>% dplyr::filter(ensembl_gene_id %in% biomart_list_filtered$ensembl_gene_id)
write.csv(counts_filtered, "tables/counts_filtered.csv", row.names=FALSE)
write.csv(biomart_list_filtered, "tables/gene_names_mapped.csv", row.names=FALSE)
View(counts)
help(DESeqDataSetFromMatrix)
# counts normalization with variance stabilizing
help(vst)
# here we perform differential expression analysis in order to calculate
# overall mean expression levels of genes;
# the design formula implies that we created an intercept-only model
dds <- DESeqDataSetFromMatrix(countData = count_matrix_filtered, colData = metadata_table,
design = ~1)
# here we perform differential expression analysis in order to calculate
# overall mean expression levels of genes;
# the design formula implies that we created an intercept-only model
dds <- DESeqDataSetFromMatrix(countData = counts_filtered, colData=metadata,
design = ~1)
metadata
View(counts_filtered)
counts_filtered
counts <- read.csv(counts_csv)
# here we perform differential expression analysis in order to calculate
# overall mean expression levels of genes;
# the design formula implies that we created an intercept-only model
dds <- DESeqDataSetFromMatrix(countData=counts_filtered, colData=metadata,
design = ~1)
counts_filtered
# select counts corresponding to retrieved biomaRt list
counts_filtered <- counts %>% dplyr::filter(ensembl_gene_id %in% biomart_list_filtered$ensembl_gene_id)
counts_filtered
counts <- counts %>% tibble::column_to_rownames("ensembl_gene_id")
counts_filtered <- counts_filtered %>% tibble::column_to_rownames("ensembl_gene_id")
# here we perform differential expression analysis in order to calculate
# overall mean expression levels of genes;
# the design formula implies that we created an intercept-only model
dds <- DESeqDataSetFromMatrix(countData=counts_filtered, colData=metadata,
design = ~1)
# normalization of the counts with the variance stabilizing transformation
counts_vst <- vst(dds, blind = TRUE)
pca_calculated <- pca(counts_vst, metadata=metadata, removeVar=0.1)
# normalization of the counts with the variance stabilizing transformation
counts_vst <- vst(dds, blind = TRUE) %>% assay() %>% as.data.frame()
pca_calculated <- pca(counts_vst, metadata=metadata, removeVar=0.1)
biplot(pca_calculated, colby="fibroblast_line", legendPosition="right", lab=NULL)
counts <- counts(dds, normalized=TRUE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~treatment+fibroblast_lines)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~treatment+fibroblast_line)
counts <- counts(dds, normalized=TRUE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~treatment)
dds$fibroblast_line <- as.factor(dds$fibroblast_line)
dds$treatment <- as.factor(dds$treatment)
dds$treatment <- relevel(dds$treatment, ref="DMSO")
# examine the expression differences of fibroblast lines between treatments
design(dds) <- formula(~ treatment + fibroblast_line)
# Run DESeq2
dds <- DESeq(dds)
counts <- counts(dds, normalized=TRUE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~treatment+fibroblast_line)
dds <- DESeqDataSetFromMatrix(countData=counts_vst,
colData=metadata,
design=~treatment)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~treatment)
counts
counts <- read.csv(counts_csv)
# get genes info via biomaRts
biomart_list <- getBM(filter="ensembl_gene_id",
attributes=c("ensembl_gene_id",
"hgnc_symbol",
"transcript_biotype",
"description"),
values=counts$ensembl_gene_id, mart=ensembl)
# we subset only protein coding genes and miRNA
biomart_list_filtered <- biomart_list %>% dplyr::filter(transcript_biotype %in% c("protein_coding",
"miRNA"))
# select counts corresponding to retrieved biomaRt list
counts_filtered <- counts %>% dplyr::filter(ensembl_gene_id %in% biomart_list_filtered$ensembl_gene_id)
# normalization of the counts with the variance stabilizing transformation
counts_vst <- vst(dds, blind = TRUE) %>% assay() %>% as.data.frame()
counts
counts_filtered
dds <- DESeqDataSetFromMatrix(countData=counts_vst,
colData=metadata,
design=~treatment)
dds <- DESeqDataSetFromMatrix(countData=counts_filtered,
colData=metadata,
design=~treatment)
counts_filtered
counts_filtered <- counts_filtered %>% tibble::column_to_rownames("ensembl_gene_id")
counts_filtered
dds <- DESeqDataSetFromMatrix(countData=counts_filtered,
colData=metadata,
design=~treatment)
dds$fibroblast_line <- as.factor(dds$fibroblast_line)
dds$treatment <- as.factor(dds$treatment)
dds$treatment <- relevel(dds$treatment, ref="DMSO"
counts <- counts(dds, normalized=TRUE)
counts <- counts(dds, normalized=TRUE)
counts <- counts(dds, normalized=FALSE)
design <- as.data.frame(colData(dds))
degCheckFactors(counts)
counts <- counts(dds, normalized=TRUE)
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~treatment)
dds$fibroblast_line <- as.factor(dds$fibroblast_line)
dds$treatment <- as.factor(dds$treatment)
dds$treatment <- relevel(dds$treatment, ref="DMSO")
# examine the expression differences of fibroblast lines between treatments
design(dds) <- formula(~ treatment + fibroblast_line)
# Run DESeq2
dds <- DESeq(dds)
counts <- counts(dds, normalized=TRUE)
design <- as.data.frame(colData(dds))
degCheckFactors(counts)
help(DESeq)
pca_calculated <- pca(counts_vst, metadata=metadata, removeVar=0.1)
biplot(pca_calculated, colby="fibroblast_line", legendPosition="right", lab=NULL)
biplot(pca_calculated, colby="treatment", legendPosition="right", lab=NULL)
pca_calculated <- pca(counts_vst, metadata=metadata, removeVar=0.1)
biplot(pca_calculated, colby="fibroblast_line", legendPosition="right", lab=NULL)
### For fibroblast_line factor
```{r pca-fibroblast}
biplot(pca_calculated, colby="treatment", legendPosition="right", lab=NULL)
# normalization of the counts with the variance stabilizing transformation
counts_filtered_vst <- vst(dds, blind=TRUE) %>% assay() %>% as.data.frame()
pca_calculated <- pca(counts_filtered_vst, metadata=metadata, removeVar=0.1)
matrix_correlations <- cor(counts_filtered_vst)
f1 <- pheatmap(matrix_correlations,
annotation=metadata_table,
show_rownames=TRUE,
show_colnames=FALSE)
f1 <- pheatmap(matrix_correlations,
annotation=metadata,
show_rownames=TRUE,
show_colnames=FALSE)
pairsplot(pca_calculated, colby="fibroblast_line")
pairsplot(pca_calculated, colby="treatment")
dds <- DESeqDataSetFromMatrix(countData = count_matrix_filtered, colData = metadata_table,
design = ~ fibroblast_line + treatment)
dds <- DESeqDataSetFromMatrix(countData=counts_filtered, colData=metadata,
design=~fibroblast_line+treatment)
dds_tested <- DESeq(dds, test = "LRT", reduced = ~ 1)
significant_genes <- results(dds_tested) %>% as.data.frame() %>% filter(padj < 0.01)
significant_genes <- results(dds_tested) %>% as.data.frame() %>% dplyr::filter(padj < 0.01)
subset_genes <- significant_genes %>% arrange(padj) %>% head(n = 1000)
subset_genes <- subset_genes %>% tibble::rownames_to_column("X")
help(vst)
significant_genes <- results(dds_tested) %>% as.data.frame() %>% dplyr::filter(padj < 0.01)
subset_genes <- significant_genes %>% arrange(padj) %>% head(n = 1000)
subset_genes <- subset_genes %>% tibble::rownames_to_column("X")
matrix_genes <- assay(dds_tested)[subset_genes$X, ]
matrix_lrt <- varianceStabilizingTransformation(matrix_lrt)
significant_genes <- results(dds_tested) %>% as.data.frame() %>% dplyr::filter(padj < 0.01)
subset_genes <- significant_genes %>% arrange(padj) %>% head(n = 1000)
subset_genes <- subset_genes %>% tibble::rownames_to_column("X")
matrix_genes <- assay(dds_tested)[subset_genes$X, ]
matrix_genes <- varianceStabilizingTransformation(matrix_genes)
View(matrix_genes)
significant_genes <- results(dds_tested) %>% as.data.frame() %>% dplyr::filter(padj < 0.01)
subset_genes <- significant_genes %>% arrange(padj) %>% head(n = 1000)
subset_genes <- subset_genes %>% tibble::rownames_to_column("X")
matrix_genes <- assay(dds_tested)[subset_genes$X, ]
matrix_genes <- vst(matrix_genes)
significant_genes <- results(dds_tested) %>% as.data.frame() %>% dplyr::filter(padj < 0.01)
subset_genes <- significant_genes %>% arrange(padj) %>% head(n = 1000)
subset_genes <- subset_genes %>% tibble::rownames_to_column("X")
matrix_genes <- assay(dds_tested)[subset_genes$X, ]
matrix_genes <- varianceStabilizingTransformation(matrix_genes)
metadata$treatment <- as.factor(metadata$treatment)
metadata$fibroblast_line <- as.factor(metadata$fibroblast_line)
gene_clusters <- degPatterns(matrix_lrt, metadata=metadata, time="fibroblast_line", col=NULL)
View(matrix_genes)
metadata$treatment <- as.factor(metadata$treatment)
metadata$fibroblast_line <- as.factor(metadata$fibroblast_line)
gene_clusters <- degPatterns(matrix_genes, metadata=metadata, time="fibroblast_line", col=NULL)
gene_clusters
gene_clusters <- degPatterns(matrix_genes, metadata=metadata, time="treatment", col=NULL)
f1 <- pheatmap(matrix_correlations,
annotation=metadata,
show_rownames=TRUE,
show_colnames=FALSE)
f1 <- pheatmap(matrix_correlations,
annotation=metadata,
show_rownames=FALSE,
show_colnames=FALSE)
res_tazarotene_adapalene <- results(dds,
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
dds <- DESeqDataSetFromMatrix(countData=counts_filtered,
colData=metadata,
design=~fibroblast_line+treatment)
dds_tested <- DESeq(dds, test="Wald")
res_tazarotene_adapalene <- results(dds,
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
res_tazarotene_adapalene <- results(dds,
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
res_tazarotene_adapalene <- results(dds,
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
dds
res_tazarotene_adapalene <- lfcShrink(dds,
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
resultsNames(dds)
res_tazarotene_adapalene <- lfcShrink(dds_tested,
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
install.packages(apeglm)
install.packages("apeglm")
res_tazarotene_adapalene <- results(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
res_tazarotene_adapalene <- lfcShrink(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
library(ashr)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("apeglm")
res_tazarotene_adapalene <- lfcShrink(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
install.packages('ashr')
res_tazarotene_adapalene <- lfcShrink(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
library(ashr)
res_tazarotene_adapalene <- lfcShrink(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
tmp <- genes_mapped %>% filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
genes_mapped <- read.csv("tables/gene_names_mapped.csv")
tmp <- genes_mapped %>% filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
tmp <- genes_mapped %>% dplyr::filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
res_tazarotene_adapalene
res_tazarotene_adapalene
View(res_tazarotene_adapalene)
tmp <- genes_mapped %>% dplyr::filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
tmp <- genes_mapped %>% dplyr::filter(genes_mapped$ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
genes_mapped
genes_mapped
genes_mapped
genes_mapped <- read.csv("tables/gene_names_mapped.csv")
genes_mapped
View(genes_mapped)
res_tazarotene_adapalene <- lfcShrink(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
res_tazarotene_adapalene <- lfcShrink(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
tmp <- genes_mapped %>% dplyr::filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
genes_mapped <- read.csv("tables/gene_names_mapped.csv")
tmp <- genes_mapped %>% dplyr::filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
genes_mapped
test <- read.csv("tables/metadata.csv")
test
knitr::opts_knit$set(root.dir = '~/Rstudio/2023_rnaseq_course/week2')
setwd("~/Rstudio/2023_rnaseq_course/week2")
genes_mapped <- read.csv("tables/gene_names_mapped.csv")
res_tazarotene_adapalene <- lfcShrink(dds_tested,
type="ashr",
contrast=c("treatment", "tazarotene", "adapalene")) %>% as.data.frame() %>% tibble::rownames_to_column("gene")
tmp <- genes_mapped %>% dplyr::filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
tmp <- genes_mapped %>% dplyr::filter(ensembl_gene_id %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
tmp <- genes_mapped %>% dplyr::filter("ensembl_gene_id" %in% res_tazarotene_adapalene$gene) %>% rename(gene=ensembl_gene_id)
View(genes_mapped)
genes_mapped
genes_mapped %>% head()
